#include <stdio.h>

void bestfit(int mp[], int p[], int n, int m) {
    for (int i = 0; i < m; i++) {
        int bestIndex = -1;
        for (int j = 0; j < n; j++) {
            if (mp[j] >= p[i]) {
                if (bestIndex == -1 || mp[j] < mp[bestIndex]) {
                    bestIndex = j;
                }
            }
        }
        if (bestIndex != -1) {
            printf("\nProcess %d of size %d fits in memory partition %d of size %d", i + 1, p[i], bestIndex + 1, mp[bestIndex]);
            mp[bestIndex] -= p[i];
        } else {
            printf("\nProcess %d of size %d must wait for memory", i + 1, p[i]);
        }
    }
}

void rsort(int a[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (a[j] < a[j + 1]) {
                int t = a[j];
                a[j] = a[j + 1];
                a[j + 1] = t;
            }
        }
    }
}

void sort(int a[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (a[j] > a[j + 1]) {
                int t = a[j];
                a[j] = a[j + 1];
                a[j + 1] = t;
            }
        }
    }
}

void firstfit(int mp[], int p[], int n, int m) {
    for (int i = 0; i < m; i++) {
        int allocated = 0;
        for (int j = 0; j < n; j++) {
            if (mp[j] >= p[i]) {
                printf("\nProcess %d of size %d fits in memory partition %d of size %d", i + 1, p[i], j + 1, mp[j]);
                mp[j] -= p[i];
                allocated = 1;
                break;
            }
        }
        if (!allocated) {
            printf("\nProcess %d of size %d must wait for memory", i + 1, p[i]);
        }
    }
}

void worstfit(int mp[], int p[], int n, int m) {
    rsort(mp, n);
    bestfit(mp, p, n, m);
}

int main() {
    int m, n, mp[20], p[20], ch;
    printf("Number of memory partitions: ");
    scanf("%d", &n);
    printf("Number of processes: ");
    scanf("%d", &m);

    printf("Enter the memory partitions: \n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &mp[i]);
    }

    printf("Enter process sizes: \n");
    for (int i = 0; i < m; i++) {
        scanf("%d", &p[i]);
    }

    printf("1. First Fit\t2. Best Fit\t3. Worst Fit\nEnter your choice: ");
    scanf("%d", &ch);

    switch (ch) {
        case 1:
            firstfit(mp, p, n, m);
            break;
        case 2:
            bestfit(mp, p, n, m);
            break;
        case 3:
            worstfit(mp, p, n, m);
            break;
        default:
            printf("Invalid choice!");
            break;
    }

    return 0;
}
